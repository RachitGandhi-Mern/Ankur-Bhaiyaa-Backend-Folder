   OVERALL FLOW (ENGLISH)
	1.	App Initialization
	‚Ä¢	express, cookie-parser middlewares are initialized.
	‚Ä¢	Routes are connected from ./Routes/auth.routes.
	2.	Database Connection
	‚Ä¢	Mongoose connects MongoDB using .connect() with process.env.MONGODB_URL.
	3.	User Model (Schema)
	‚Ä¢	A userModel is created with username and password fields.
	4.	Register Route (/auth/register)
	‚Ä¢	Accepts username + password.
	‚Ä¢	Creates new user in MongoDB.
	‚Ä¢	Creates a JWT token and stores it in a cookie.
	5.	Login Route (/auth/login)
	‚Ä¢	Accepts username + password.
	‚Ä¢	Validates if user exists and password is correct.
	‚Ä¢	Sends back success message if valid.
	6.	Protected Route (/auth/user)
	‚Ä¢	Checks for JWT in cookie.
	‚Ä¢	Verifies token.
	‚Ä¢	If valid, fetches user data from DB.



üîÅ OVERALL FLOW (HINGLISH)
	1.	App Setup
	‚Ä¢	express, cookie-parser jaise middleware lagaye jaate hain.
	‚Ä¢	/auth route auth.routes se connect hota hai.
	2.	MongoDB se connection
	‚Ä¢	Mongoose connect() se .env wali MongoDB URL se DB se judta hai.
	3.	User ka Schema
	‚Ä¢	username aur password fields ke saath user ka model banaya jaata hai.
	4.	Register Route (/auth/register)
	‚Ä¢	User ke username aur password ko accept karta hai.
	‚Ä¢	User DB me store hota hai.
	‚Ä¢	JWT token banake cookie me set hota hai.
	5.	Login Route (/auth/login)
	‚Ä¢	Username-password verify karta hai.
	‚Ä¢	Agar user hai aur password sahi hai to success message deta hai.
	6.	User Route (/auth/user)
	‚Ä¢	Cookie se token uthata hai.
	‚Ä¢	JWT token verify karta hai.
	‚Ä¢	Token valid hai to DB se user ka data fetch karta hai.


üí° Best Practices
‚úÖ Store passwords as hashed values (use bcrypt)
‚úÖ Always handle errors with try...catch
‚úÖ Secure JWT using HttpOnly and Secure cookies
‚úÖ Never push .env to GitHub
